@inproceedings{Aaron2013sonic,
  title = {From Sonic {{Pi}} to Overtone: Creative Musical Experiences with Domain-Specific and Functional Languages},
  shorttitle = {From Sonic {{Pi}} to Overtone},
  booktitle = {Proceedings of the First {{ACM SIGPLAN}} Workshop on {{Functional}} Art, Music, Modeling \& Design - {{FARM}} '13},
  author = {Aaron, Samuel and Blackwell, Alan F.},
  date = {2013},
  pages = {35},
  publisher = {ACM Press},
  location = {Boston, Massachusetts, USA},
  doi = {10.1145/2505341.2505346},
  abstract = {Domain Specific and Functional languages provide an excellent linguistic context for exploring new forms of music notation – not just for formalising compositions but also for live interaction workflows. This experience report describes two novel live coding systems that employ code execution to modify live sounds and music. The first of these systems, Sonic Pi, aims at teaching core computing notions to school students using live-coded music as a means of stimulating and maintaining student engagement. We describe how an emphasis on a functional style improves the ease in which core computer science concepts can be communicated to students. Secondly we describe Overtone, a functional language and live coding environment aimed towards professional electronic musicians. We describe how Overtone’s abstractions and architecture strongly benefit from a functional-oriented implementation. Both Sonic Pi and Overtone are freely available open-source platforms.},
  eventtitle = {The First {{ACM SIGPLAN}} Workshop},
  isbn = {978-1-4503-2386-4},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/TXL85RUX/Aaron and Blackwell - 2013 - From sonic Pi to overtone creative musical experi.pdf}
}

@book{Abelson2002Structure,
  title = {Structure and Interpretation of Computer Programs},
  author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  date = {2002},
  series = {Electrical Engineering and Computer Science Series},
  edition = {2. ed., 7. [pr.]},
  publisher = {MIT Press [u.a.]},
  location = {Cambridge, Mass.},
  isbn = {978-0-262-51087-5 978-0-262-01153-2 978-0-07-000484-9},
  langid = {english},
  pagetotal = {657}
}
@inproceedings{Ariola1995callneed,
  title = {A Call-by-Need Lambda Calculus},
  booktitle = {Proceedings of the 22nd {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Ariola, Zena M. and Maraist, John and Odersky, Martin and Felleisen, Matthias and Wadler, Philip},
  date = {1995-01-25},
  series = {{{POPL}} '95},
  pages = {233--246},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/199448.199507},
  abstract = {The mismatch between the operational semantics of the lambda calculus and the actual behavior of implementations is a major obstacle for compiler writers. They cannot explain the behavior of their evaluator in terms of source level syntax, and they cannot easily compare distinct implementations of different lazy strategies. In this paper we derive an equational characterization of call-by-need and prove it correct with respect to the original lambda calculus. The theory is a strictly smaller theory than the lambda calculus. Immediate applications of the theory concern the correctness proofs of a number of implementation strategies, e.g., the call-by-need continuation passing transformation and the realization of sharing via assignments.},
  isbn = {978-0-89791-692-9},
  keywords = {seminal},
  file = {/home/xavigo/Zotero/storage/3VM3IPQ8/Ariola et al. - 1995 - A call-by-need lambda calculus.pdf}
}

@article{Backus1978Can,
  title = {Can Programming Be Liberated from the von {{Neumann}} Style? A Functional Style and Its Algebra of Programs},
  shorttitle = {Can Programming Be Liberated from the von {{Neumann}} Style?},
  author = {Backus, John},
  date = {1978-08-01},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {21},
  number = {8},
  pages = {613--641},
  issn = {0001-0782},
  doi = {10.1145/359576.359579},
  abstract = {Conventional programming languages are growing ever more enormous, but not stronger. Inherent defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor—the von Neumann computer, their close coupling of semantics to state transitions, their division of programming into a world of expressions and a world of statements, their inability to effectively use powerful combining forms for building new programs from existing ones, and their lack of useful mathematical properties for reasoning about programs. An alternative functional style of programming is founded on the use of combining forms for creating programs. Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not require the complex machinery of procedure declarations to become generally applicable. Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages. Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose “unknowns” are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written. Combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws. General theorems of the algebra give the detailed behavior and termination conditions for large classes of programs. A new class of computing systems uses the functional programming style both in its programming language and in its state transition rules. Unlike von Neumann languages, these systems have semantics loosely coupled to states—only one state transition occurs per major computation.},
  keywords = {algebra of programs,applicative computing systems,applicative state transition systems,combining forms,functional forms,functional programming,metacomposition,models of computing systems,program correctness,program termination,program transformation,programming languages,von Neumann computers,von Neumann languages},
  file = {/home/xavigo/Zotero/storage/NAX4AQC3/backus_1978_can_programming_be_liberated_from_the_von_neumann_style.pdf}
}

@book{Blackwell2022Live,
  title = {Live Coding: A User's Manual},
  shorttitle = {Live Coding Book},
  author = {Blackwell, Alan F. and Cocker, Emma and Cox, Geoff and McLean, Alex and Magnusson, Thor},
  date = {2022},
  series = {Software Studies},
  publisher = {The MIT Press},
  location = {Cambridge, Massachusetts},
  url = {https://livecodingbook.toplap.org/},
  abstract = {"A multi-authored comprehensive introduction to live coding's potential open up deeper questions about contemporary cultural production and computational culture"--},
  isbn = {978-0-262-54481-8},
  pagetotal = {329},
  keywords = {Agile software development,Algorithms,Computer programming,Creation (Literary artistic etc.),Philosophy,Psychological aspects},
  file = {/home/xavigo/Zotero/storage/NX78W3LN/Blackwell et al. - 2022 - Live coding a user's manual.pdf}
}

@incollection{Clarke1999Rhythm,
  title = {Rhythm and {{Timing}} in {{Music}}},
  booktitle = {The {{Psychology}} of {{Music}} ({{Second Edition}})},
  author = {Clarke, Eric F.},
  editor = {Deutsch, Diana},
  date = {1999-01-01},
  series = {Cognition and {{Perception}}},
  pages = {473--500},
  publisher = {Academic Press},
  location = {San Diego},
  doi = {10.1016/B978-012213564-4/50014-7},
  abstract = {This chapter provides an overview of research relating to the temporal dimension in music. It focuses primarily on small to medium-scale temporal phenomena in music, the domain that commonly referrers to as rhythm, rather than the larger-scale properties of form. The chapter has adopted a view of rhythm that sees it as the interaction between meter and grouping. There are theoretical accounts of the conditions for the formation of grouping structures. The term timing used in this chapter refers to the temporal microstructure that is characteristic of performances of music and is widely regarded as the generative consequence of a performer's conception of musical structure. Research in rhythm and timing, is a shift from a rather abstract symbolic approach to perception and production toward an outlook that takes more account of properties of the auditory and motor systems, and of the body in general, or makes use of sub-symbolic principles, which require fewer explicit rules to be built into the models.},
  isbn = {978-0-12-213564-4},
  file = {/home/xavigo/Zotero/storage/IMS45D27/clarke_1999_rhythm_and_timing_in_music.pdf;/home/xavigo/Zotero/storage/VGYDISTH/B9780122135644500147.html}
}

@inproceedings{Elliott1997Functional,
  title = {Functional Reactive Animation},
  booktitle = {Proceedings of the Second {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Elliott, Conal and Hudak, Paul},
  date = {1997-08-01},
  series = {{{ICFP}} '97},
  pages = {263--273},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/258948.258973},
  abstract = {Fran (Functional Reactive Animation) is a collection of data types and functions for composing richly interactive, multimedia animations. The key ideas in Fran are its notions of behaviors and events. Behaviors are time-varying, reactive values, while events are sets of arbitrarily complex conditions, carrying possibly rich information. Most traditional values can be treated as behaviors, and when images are thus treated, they become animations. Although these notions are captured as data types rather than a programming language, we provide them with a denotational semantics, including a proper treatment of real time, to guide reasoning and implementation. A method to effectively and efficiently perform event detection using interval analysis is also described, which relies on the partial information structure on the domain of event times. Fran has been implemented in Hugs, yielding surprisingly good performance for an interpreter-based system. Several examples are given, including the ability to describe physical phenomena involving gravity, springs, velocity, acceleration, etc. using ordinary differential equations.},
  isbn = {978-0-89791-918-0},
  file = {/home/xavigo/Zotero/storage/6RG7QTYS/Elliott and Hudak - 1997 - Functional reactive animation.pdf;/home/xavigo/Zotero/storage/XGG76Y24/258948.258973.pdf}
}

@inproceedings{Hudak2007history,
  title = {A History of {{Haskell}}: Being Lazy with Class},
  shorttitle = {A History of {{Haskell}}},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} Conference on {{History}} of Programming Languages},
  author = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
  date = {2007-06-09},
  series = {{{HOPL III}}},
  pages = {12-1--12-55},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/1238844.1238856},
  abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
  isbn = {978-1-59593-766-7},
  file = {/home/xavigo/Zotero/storage/HEGGXBPT/Hudak et al. - 2007 - A history of Haskell being lazy with class.pdf}
}

@book{Hudak2018Haskell,
  title = {The {{Haskell School}} of {{Music}}: {{From Signals}} to {{Symphonies}}},
  shorttitle = {The {{Haskell School}} of {{Music}}},
  author = {Hudak, Paul and Quick, Donya},
  date = {2018-09-30},
  edition = {1},
  publisher = {Cambridge University Press},
  location = {Cambridge, United Kingdom},
  doi = {10.1017/9781108241861},
  isbn = {978-1-108-24186-1},
  file = {/home/xavigo/Zotero/storage/W5RLJI74/hudak_quick_2018_the_haskell_school_of_music.pdf}
}

@article{Hughes1989Why,
  title = {Why {{Functional Programming Matters}}},
  author = {Hughes, John},
  date = {1989-02-01},
  journaltitle = {The Computer Journal},
  shortjournal = {The Computer Journal},
  volume = {32},
  number = {2},
  pages = {98--107},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/32.2.98},
  abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write and to debug, and provides a collection of modules that can be reused to reduce future programming costs. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute significantly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). We conclude that since modularity is the key to successful programming, functional programming offers important advantages for software development.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/DJKEVUCR/Hughes - 1989 - Why Functional Programming Matters.pdf}
}

@book{Ji2015Sophus,
  title = {Sophus {{Lie}} and {{Felix Klein}}: The {{Erlangen}} Program and Its Impact in Mathematics and Physics},
  shorttitle = {Sophus {{Lie}} and {{Felix Klein}}},
  editor = {Ji, Lizhen and Papadopoulos, Athanase},
  date = {2015},
  series = {{{IRMA}} Lectures in Mathematics and Theoretical Physics},
  number = {23},
  publisher = {European Mathematical Society},
  location = {Zürich},
  isbn = {978-3-03719-148-4},
  pagetotal = {330},
  keywords = {Geometry,Geometry Projective,Group theory,History,Klein Felix,Lie Sophus}
}

@article{Landin1966next,
  title = {The next 700 Programming Languages},
  author = {Landin, P. J.},
  date = {1966-03-01},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {9},
  number = {3},
  pages = {157--166},
  issn = {0001-0782},
  doi = {10.1145/365230.365257},
  abstract = {A family of unimplemented computing languages is described that is intended to span differences of application area by a unified framework. This framework dictates the rules about the uses of user-coined names, and the conventions about characterizing functional relationships. Within this framework the design of a specific language splits into two independent parts. One is the choice of written appearances of programs (or more generally, their physical representation). The other is the choice of the abstract entities (such as numbers, character-strings, list of them, functional relations among them) that can be referred to in the language. The system is biased towards “expressions” rather than “statements.” It includes a nonprocedural (purely functional) subsystem that aims to expand the class of users' needs that can be met by a single print-instruction, without sacrificing the important properties that make conventional right-hand-side expressions easy to construct and understand.},
  file = {/home/xavigo/Zotero/storage/3U7U4A5I/landin_1966_the_next_700_programming_languages.pdf}
}

@article{Lee2009Computing,
  title = {Computing Needs Time},
  author = {Lee, Edward A.},
  date = {2009-05-01},
  journaltitle = {Commun. ACM},
  volume = {52},
  number = {5},
  pages = {70--79},
  issn = {0001-0782},
  doi = {10.1145/1506409.1506426},
  abstract = {The passage of time is essential to ensuring the repeatability and predictability of software and networks in cyber-physical systems.},
  keywords = {computer science,programming,seminal,temporal semantics},
  file = {/home/xavigo/Zotero/storage/AJ2S2RRF/Lee - 2009 - Computing needs time.pdf}
}

@thesis{McLean2011ArtistProgrammers,
  type = {phdthesis},
  title = {Artist-{{Programmers}} and {{Programming Languages}} for the {{Arts}}},
  author = {McLean, Alex},
  date = {2011-10},
  institution = {University of London},
  langid = {english},
  pagetotal = {172},
  file = {/home/xavigo/Zotero/storage/ABI5EKIY/McLean - Artist-Programmers and Programming Languages for t.pdf}
}

@inproceedings{Moggi1989Computational,
  title = {Computational Lambda-Calculus and Monads},
  booktitle = {Proceedings of the {{Fourth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Moggi, Eugenio},
  date = {1989-06},
  pages = {14--23},
  publisher = {IEEE Computer Society Press},
  location = {Pacific Grove, CA, USA},
  eventtitle = {{{LICS}} 1989},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/6SI683PK/moggi_1989_computational_lambda-calculus_and_monads.ps}
}

@article{PeytonJones2002Tackling,
  title = {Tackling the {{Awkward Squad}}: Monadic Input/Output, Concurrency, Exceptions, and Foreign-Language Calls in {{Haskell}}},
  author = {Peyton Jones, Simon},
  date = {2002-07-25},
  abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awkward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/TQJJXX7V/Jones - Tackling the Awkward Squad monadic inputoutput, .pdf}
}

@thesis{Sorensen2018Extempore,
  type = {Thesis (PhD)},
  title = {Extempore: {{The}} Design, Implementation and Application of a Cyber-Physical Programming Language},
  shorttitle = {Extempore},
  author = {Sorensen, Andrew Carl},
  date = {2018-06-21},
  institution = {Australian National University},
  url = {http://hdl.handle.net/1885/144603},
  urldate = {2025-02-05},
  abstract = {There is a long history of experimental and exploratory programming supported by systems that expose interaction through a programming language interface. These live programming systems enable software developers to create, extend, and modify the behaviour of executing software by changing source code without perceptual breaks for recompilation. These live programming systems have taken many forms, but have generally been limited in their ability to express low-level programming concepts and the generation of efficient native machine code. These shortcomings have limited the effectiveness of live programming in domains that require highly efficient numerical processing and explicit memory management. The most general questions addressed by this thesis are what a systems language designed for live programming might look like and how such a language might influence the development of live programming in performance sensitive domains requiring real-time support, direct hardware control, or high performance computing. This thesis answers these questions by exploring the design, implementation and application of Extempore, a new systems programming language, designed specifically for live interactive programming.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/YBCI5ZJR/Sorensen - 2018 - Extempore The design, implementation and application of a cyber-physical programming language.pdf}
}

@inproceedings{Spiegel1981Manipulations,
  title = {Manipulations of {{Musical Patterns}}},
  booktitle = {Proceedings of the {{Symposium}} on {{Small Computers}} and the {{Arts}}},
  author = {Spiegel, Laurie},
  date = {1981},
  pages = {19--22},
  url = {http://lauriespiegel.net/ls/writings/musical_manip.html},
  keywords = {morphology,pattern},
  file = {/home/xavigo/Zotero/storage/FXXPBA3W/musical_manip.html}
}

@book{Stillwell1998Numbers,
  title = {Numbers and {{Geometry}}},
  author = {Stillwell, John},
  editor = {Axler, S. and Gehring, F. W. and Ribet, K. A.},
  editortype = {redactor},
  date = {1998},
  series = {Undergraduate {{Texts}} in {{Mathematics}}},
  publisher = {Springer},
  location = {New York, NY},
  doi = {10.1007/978-1-4612-0687-3},
  isbn = {978-1-4612-6867-3 978-1-4612-0687-3},
  keywords = {Area,calculus,Prime,set,Volume},
  file = {/home/xavigo/Zotero/storage/FQH4PP93/stillwell_1998_numbers_and_geometry.pdf}
}

@book{Toussaint2020Geometry,
  title = {The {{Geometry}} of {{Musical Rhythm}}: {{What Makes}} a "{{Good}}" {{Rhythm Good}}?},
  shorttitle = {The Geometry of Musical Rhythm},
  author = {Toussaint, Godfried T},
  date = {2020},
  edition = {Second edition},
  publisher = {CRC Press},
  location = {Boca Raton London New York},
  abstract = {The original edition of The Geometry of Musical Rhythm was the first book to provide a systematic and accessible computational geometric analysis of the musical rhythms of the world. It explained how the study of the mathematical properties of musical rhythm generates common mathematical problems that arise in a variety of seemingly disparate fields. The book also introduced the distance approach to phylogenetic analysis and illustrated its application to the study of musical rhythm. The new edition retains all of this, while also adding 100 pages, 93 figures, 225 new references, and six new chapters covering topics such as meter and metric complexity, rhythmic grouping, expressive timbre and timing in rhythmic performance, and evolution phylogenetic analysis of ancient Greek paeonic rhythms. In addition, further context is provided to give the reader a fuller and richer insight into the historical connections between music and mathematics.},
  isbn = {978-0-8153-7097-0 978-0-8153-5038-5},
  langid = {english},
  pagetotal = {351},
  annotation = {OCLC: 1139843477},
  file = {/home/xavigo/Zotero/storage/MZZDIRLE/Toussaint - 2020 - The geometry of musical rhythm what makes a good.pdf}
}

@thesis{VillasenorRamirez2022SonoTexto,
  type = {Tesis doctoral},
  title = {SonoTexto: Relación entre práctica artística y desarrollo tecnológico en el live coding},
  shorttitle = {SonoTexto},
  author = {Villaseñor Ramírez, Hernani},
  date = {2022-10},
  institution = {Universidad Nacional Autónoma de México},
  location = {Ciudad de México},
  langid = {mexican},
  file = {/home/xavigo/Zotero/storage/IVQWPPAT/Villaseñor Ramírez - 2022 - SonoTexto Relación entre práctica artística y des.pdf}
}

@inproceedings{Wadler1989How,
  title = {How to Make Ad-Hoc Polymorphism Less Ad Hoc},
  booktitle = {Proceedings of the 16th {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Wadler, P. and Blott, S.},
  date = {1989-01-03},
  series = {{{POPL}} '89},
  pages = {60--76},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/75277.75283},
  abstract = {This paper presents type classes, a new approach to ad-hoc polymorphism. Type classes permit overloading of arithmetic operators such as multiplication, and generalise the “eqtype variables” of Standard ML. Type classes extend the Hindley/Milner polymorphic type system, and provide a new approach to issues that arise in object-oriented programming, bounded type quantification, and abstract data types. This paper provides an informal introduction to type classes, and defines them formally by means of type inference rules.},
  isbn = {978-0-89791-294-5},
  file = {/home/xavigo/Zotero/storage/WML3TANJ/wadler_blott_1989_how_to_make_ad-hoc_polymorphism_less_ad_hoc.pdf}
}

@article{Wang2015ChucK,
  title = {{{ChucK}}: {{A Strongly Timed Computer Music Language}}},
  shorttitle = {{{ChucK}}},
  author = {Wang, Ge and Cook, Perry R. and Salazar, Spencer},
  date = {2015-12-01},
  journaltitle = {Computer Music Journal},
  shortjournal = {Comput. Music J.},
  volume = {39},
  number = {4},
  pages = {10--29},
  issn = {0148-9267, 1531-5169},
  doi = {10.1162/COMJ_a_00324},
  abstract = {ChucK is a programming language designed for computer music. It aims to be expressive and straightforward to read and write with respect to time and concurrency, and to provide a platform for precise audio synthesis and analysis and for rapid experimentation in computer music. In particular, ChucK defines the notion of a strongly timed audio programming language, comprising a versatile time-based programming model that allows programmers to flexibly and precisely control the flow of time in code and use the keyword now as a time-aware control construct, and gives programmers the ability to use the timing mechanism to realize sample-accurate concurrent programming. Several case studies are presented that illustrate the workings, properties, and personality of the language. We also discuss applications of ChucK in laptop orchestras, computer music pedagogy, and mobile music instruments. Properties and affordances of the language and its future directions are outlined.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/XT7GENJM/Wang et al. - 2015 - ChucK A Strongly Timed Computer Music Language.pdf}
}
